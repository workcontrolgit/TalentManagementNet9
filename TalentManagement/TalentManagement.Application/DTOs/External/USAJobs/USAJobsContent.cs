// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using QuickType;
//
//    var usaJobsContent = UsaJobsContent.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603
using System;
using System.Collections.Generic;

using System.Text.Json;
using System.Text.Json.Serialization;
using System.Globalization;


namespace TalentManagement.Application.DTOs.External.USAJobs
{

    public partial class UsaJobsContent
    {
        [JsonPropertyName("LanguageCode")]
        public string LanguageCode { get; set; }

        [JsonPropertyName("SearchParameters")]
        public SearchParameters SearchParameters { get; set; }

        [JsonPropertyName("SearchResult")]
        public SearchResult SearchResult { get; set; }
    }

    public partial class SearchParameters
    {
    }

    public partial class SearchResult
    {
        [JsonPropertyName("SearchResultCount")]
        public long SearchResultCount { get; set; }

        [JsonPropertyName("SearchResultCountAll")]
        public long SearchResultCountAll { get; set; }

        [JsonPropertyName("SearchResultItems")]
        public SearchResultItem[] SearchResultItems { get; set; }

        [JsonPropertyName("UserArea")]
        public SearchResultUserArea UserArea { get; set; }
    }

    public partial class SearchResultItem
    {
        [JsonPropertyName("MatchedObjectId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long MatchedObjectId { get; set; }

        [JsonPropertyName("MatchedObjectDescriptor")]
        public MatchedObjectDescriptor MatchedObjectDescriptor { get; set; }

        [JsonPropertyName("RelevanceRank")]
        public long RelevanceRank { get; set; }
    }

    public partial class MatchedObjectDescriptor
    {
        [JsonPropertyName("PositionID")]
        public string PositionId { get; set; }

        [JsonPropertyName("PositionTitle")]
        public string PositionTitle { get; set; }

        [JsonPropertyName("PositionURI")]
        public Uri PositionUri { get; set; }

        [JsonPropertyName("ApplyURI")]
        public Uri[] ApplyUri { get; set; }

        [JsonPropertyName("PositionLocationDisplay")]
        public string PositionLocationDisplay { get; set; }

        [JsonPropertyName("PositionLocation")]
        public PositionLocation[] PositionLocation { get; set; }

        [JsonPropertyName("OrganizationName")]
        public string OrganizationName { get; set; }

        [JsonPropertyName("DepartmentName")]
        public string DepartmentName { get; set; }

        [JsonPropertyName("SubAgency")]
        public string SubAgency { get; set; }

        [JsonPropertyName("JobCategory")]
        public JobCategory[] JobCategory { get; set; }

        [JsonPropertyName("JobGrade")]
        public JobGrade[] JobGrade { get; set; }

        [JsonPropertyName("PositionSchedule")]
        public JobCategory[] PositionSchedule { get; set; }

        [JsonPropertyName("PositionOfferingType")]
        public JobCategory[] PositionOfferingType { get; set; }

        [JsonPropertyName("QualificationSummary")]
        public string QualificationSummary { get; set; }

        [JsonPropertyName("PositionRemuneration")]
        public PositionRemuneration[] PositionRemuneration { get; set; }

        [JsonPropertyName("PositionStartDate")]
        public DateTimeOffset PositionStartDate { get; set; }

        [JsonPropertyName("PositionEndDate")]
        public DateTimeOffset PositionEndDate { get; set; }

        [JsonPropertyName("PublicationStartDate")]
        public DateTimeOffset PublicationStartDate { get; set; }

        [JsonPropertyName("ApplicationCloseDate")]
        public DateTimeOffset ApplicationCloseDate { get; set; }

        [JsonPropertyName("PositionFormattedDescription")]
        public PositionFormattedDescription[] PositionFormattedDescription { get; set; }

        [JsonPropertyName("UserArea")]
        public MatchedObjectDescriptorUserArea UserArea { get; set; }
    }

    public partial class JobCategory
    {
        [JsonPropertyName("Name")]
        public string Name { get; set; }

        [JsonPropertyName("Code")]
        public string Code { get; set; }
    }

    public partial class JobGrade
    {
        [JsonPropertyName("Code")]
        public string Code { get; set; }
    }

    public partial class PositionFormattedDescription
    {
        [JsonPropertyName("Label")]
        public string Label { get; set; }

        [JsonPropertyName("LabelDescription")]
        public string LabelDescription { get; set; }
    }

    public partial class PositionLocation
    {
        [JsonPropertyName("LocationName")]
        public string LocationName { get; set; }

        [JsonPropertyName("CountryCode")]
        public CountryCode CountryCode { get; set; }

        [JsonPropertyName("CountrySubDivisionCode")]
        public string CountrySubDivisionCode { get; set; }

        [JsonPropertyName("CityName")]
        public string CityName { get; set; }

        [JsonPropertyName("Longitude")]
        public double Longitude { get; set; }

        [JsonPropertyName("Latitude")]
        public double Latitude { get; set; }
    }

    public partial class PositionRemuneration
    {
        [JsonPropertyName("MinimumRange")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long MinimumRange { get; set; }

        [JsonPropertyName("MaximumRange")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long MaximumRange { get; set; }

        [JsonPropertyName("RateIntervalCode")]
        public string RateIntervalCode { get; set; }

        [JsonPropertyName("Description")]
        public string Description { get; set; }
    }

    public partial class MatchedObjectDescriptorUserArea
    {
        [JsonPropertyName("Details")]
        public Details Details { get; set; }

        [JsonPropertyName("IsRadialSearch")]
        public bool IsRadialSearch { get; set; }
    }

    public partial class Details
    {
        [JsonPropertyName("JobSummary")]
        public string JobSummary { get; set; }

        [JsonPropertyName("WhoMayApply")]
        public JobCategory WhoMayApply { get; set; }

        [JsonPropertyName("LowGrade")]
        public string LowGrade { get; set; }

        [JsonPropertyName("HighGrade")]
        public string HighGrade { get; set; }

        [JsonPropertyName("PromotionPotential")]
        public string PromotionPotential { get; set; }

        [JsonPropertyName("SubAgencyName")]
        public string SubAgencyName { get; set; }

        [JsonPropertyName("OrganizationCodes")]
        public string OrganizationCodes { get; set; }

        [JsonPropertyName("Relocation")]
        public string Relocation { get; set; }

        [JsonPropertyName("HiringPath")]
        public string[] HiringPath { get; set; }

        [JsonPropertyName("MCOTags")]
        public object[] McoTags { get; set; }

        [JsonPropertyName("TotalOpenings")]
        public string TotalOpenings { get; set; }

        [JsonPropertyName("AgencyMarketingStatement")]
        public string AgencyMarketingStatement { get; set; }

        [JsonPropertyName("TravelCode")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TravelCode { get; set; }

        [JsonPropertyName("ApplyOnlineUrl")]
        public Uri ApplyOnlineUrl { get; set; }

        [JsonPropertyName("DetailStatusUrl")]
        public Uri DetailStatusUrl { get; set; }

        [JsonPropertyName("MajorDuties")]
        public string[] MajorDuties { get; set; }

        [JsonPropertyName("Education")]
        public string Education { get; set; }

        [JsonPropertyName("Requirements")]
        public string Requirements { get; set; }

        [JsonPropertyName("Evaluations")]
        public string Evaluations { get; set; }

        [JsonPropertyName("HowToApply")]
        public string HowToApply { get; set; }

        [JsonPropertyName("WhatToExpectNext")]
        public string WhatToExpectNext { get; set; }

        [JsonPropertyName("RequiredDocuments")]
        public string RequiredDocuments { get; set; }

        [JsonPropertyName("Benefits")]
        public string Benefits { get; set; }

        [JsonPropertyName("BenefitsUrl")]
        public Uri BenefitsUrl { get; set; }

        [JsonPropertyName("BenefitsDisplayDefaultText")]
        public bool BenefitsDisplayDefaultText { get; set; }

        [JsonPropertyName("OtherInformation")]
        public string OtherInformation { get; set; }

        [JsonPropertyName("KeyRequirements")]
        public object[] KeyRequirements { get; set; }

        [JsonPropertyName("WithinArea")]
        public string WithinArea { get; set; }

        [JsonPropertyName("CommuteDistance")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long CommuteDistance { get; set; }

        [JsonPropertyName("ServiceType")]
        public string ServiceType { get; set; }

        [JsonPropertyName("AnnouncementClosingType")]
        public string AnnouncementClosingType { get; set; }

        [JsonPropertyName("AgencyContactEmail")]
        public string AgencyContactEmail { get; set; }

        [JsonPropertyName("AgencyContactPhone")]
        public string AgencyContactPhone { get; set; }

        [JsonPropertyName("PreviewQuestionnaireurl")]
        public Uri PreviewQuestionnaireurl { get; set; }

        [JsonPropertyName("SecurityClearance")]
        public string SecurityClearance { get; set; }

        [JsonPropertyName("DrugTestRequired")]
        public string DrugTestRequired { get; set; }

        [JsonPropertyName("AdjudicationType")]
        public object[] AdjudicationType { get; set; }

        [JsonPropertyName("TeleworkEligible")]
        public bool TeleworkEligible { get; set; }

        [JsonPropertyName("RemoteIndicator")]
        public bool RemoteIndicator { get; set; }

        [JsonPropertyName("BargainingUnitStatus")]
        public bool BargainingUnitStatus { get; set; }

        [JsonPropertyName("BargainingUnitStatusAdditionalText")]
        public string BargainingUnitStatusAdditionalText { get; set; }
    }

    public partial class SearchResultUserArea
    {
        [JsonPropertyName("NumberOfPages")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long NumberOfPages { get; set; }

        [JsonPropertyName("IsRadialSearch")]
        public bool IsRadialSearch { get; set; }
    }

    public enum CountryCode { UnitedStates };

    public partial class UsaJobsContent
    {
        public static UsaJobsContent FromJson(string json) => JsonSerializer.Deserialize<UsaJobsContent>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this UsaJobsContent self) => JsonSerializer.Serialize(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
        {
            Converters =
            {
                CountryCodeConverter.Singleton,
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
                IsoDateTimeOffsetConverter.Singleton
            },
        };
    }

    internal class CountryCodeConverter : JsonConverter<CountryCode>
    {
        public override bool CanConvert(Type t) => t == typeof(CountryCode);

        public override CountryCode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            if (value == "United States")
            {
                return CountryCode.UnitedStates;
            }
            throw new Exception("Cannot unmarshal type CountryCode");
        }

        public override void Write(Utf8JsonWriter writer, CountryCode value, JsonSerializerOptions options)
        {
            if (value == CountryCode.UnitedStates)
            {
                JsonSerializer.Serialize(writer, "United States", options);
                return;
            }
            throw new Exception("Cannot marshal type CountryCode");
        }

        public static readonly CountryCodeConverter Singleton = new CountryCodeConverter();
    }

    internal class ParseStringConverter : JsonConverter<long>
    {
        public override bool CanConvert(Type t) => t == typeof(long);

        public override long Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void Write(Utf8JsonWriter writer, long value, JsonSerializerOptions options)
        {
            JsonSerializer.Serialize(writer, value.ToString(), options);
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    public class DateOnlyConverter : JsonConverter<DateOnly>
    {
        private readonly string serializationFormat;
        public DateOnlyConverter() : this(null) { }

        public DateOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    public class TimeOnlyConverter : JsonConverter<TimeOnly>
    {
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null) { }

        public TimeOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
    {
        public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

        private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

        private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
        private string? _dateTimeFormat;
        private CultureInfo? _culture;

        public DateTimeStyles DateTimeStyles
        {
            get => _dateTimeStyles;
            set => _dateTimeStyles = value;
        }

        public string? DateTimeFormat
        {
            get => _dateTimeFormat ?? string.Empty;
            set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
        }

        public CultureInfo Culture
        {
            get => _culture ?? CultureInfo.CurrentCulture;
            set => _culture = value;
        }

        public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
        {
            string text;


            if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                    || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
            {
                value = value.ToUniversalTime();
            }

            text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

            writer.WriteStringValue(text);
        }

        public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? dateText = reader.GetString();

            if (string.IsNullOrEmpty(dateText) == false)
            {
                if (!string.IsNullOrEmpty(_dateTimeFormat))
                {
                    return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
                }
                else
                {
                    return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
                }
            }
            else
            {
                return default(DateTimeOffset);
            }
        }


        public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
    }
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
